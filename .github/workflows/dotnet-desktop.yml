name: Build and Release .NET Application

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:

    - name: Set color
      id: color-selector
      run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
        
    - name: Get color
      env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
      run: echo "The selected color is $SELECTED_COLOR"
      
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'

    - name: Restore Dependencies
      run: dotnet restore TheGrammar.sln

    - name: Build Solution
      run: dotnet build TheGrammar.sln --configuration Release --no-restore

    - name: Publish Application
      run: dotnet publish TheGrammar.sln --configuration Release --no-restore --output publish

    - name: Extract Application Version
      id: extract_version
      shell: pwsh
      run: |
        [xml]$csproj = Get-Content TheGrammar/TheGrammar.csproj
        $version = $csproj.Project.PropertyGroup.Version
        echo "Extracted Version: $version"
        echo "::set-output name=app_version::$version"

    - name: Use Extracted Version
      run: |
        echo "Version - ${{ steps.extract_version.outputs.app_version }}"

    - name: Create Squirrel Package
      run: |
        Set-Alias Squirrel ($env:USERPROFILE + "\.nuget\packages\clowd.squirrel\2.11.1\tools\Squirrel.exe");
        Squirrel pack --packId "TheGrammar" --framework net7.0  --packVersion ${{ steps.extract_version.outputs.app_version }}" --packDirectory "publish"
        
    - name: Zip the Application
      run: Compress-Archive -Path publish/* -DestinationPath "TheGrammar_${{ steps.extract_version.outputs.app_version }}.zip"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name:  ${{ steps.extract_version.outputs.app_version }}
        release_name: Release -  ${{ steps.extract_version.outputs.app_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./TheGrammar.zip
        asset_name: TheGrammar.zip
        asset_content_type: application/zip
